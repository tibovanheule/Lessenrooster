//Tibo vanheulepackage timetable;import javafx.application.Platform;import javafx.fxml.FXMLLoader;import javafx.scene.Parent;import javafx.scene.Scene;import javafx.scene.control.Label;import javafx.scene.control.ListView;import javafx.scene.control.MenuButton;import javafx.stage.Stage;import javafx.stage.StageStyle;import timetable.about.AboutController;import timetable.db.db;import timetable.settings.SettingsController;import java.io.IOException;import java.sql.*;import java.time.LocalDateTime;import java.time.format.DateTimeFormatter;import java.util.ArrayList;import java.util.Properties;public class Controller {    public Label day;    public Label date;    public Label time;    public MenuButton menu;    public ListView list;    private Stage stage;    public void setStageAndSetupListeners(Stage controller){        this.stage = controller;    }    public void initialize() throws IOException{        Properties properties = new Properties();        properties.load(getClass().getResourceAsStream("lessenrooster.properties"));        list.getItems().addAll(db.getList(properties.getProperty("standard.shedule")));        // TODO: 14/03/2018        //zet deze tijden  om in in oproepbare methode        //https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html        //de huidige datum        LocalDateTime now = LocalDateTime.now();        DateTimeFormatter formatTime = DateTimeFormatter.ofPattern("H:mm");        //formatteer de datum (dag)        DateTimeFormatter formatDay = DateTimeFormatter.ofPattern("EEEE");        //geef nieuwe waarde aan de label met id:day        //formateer datum        DateTimeFormatter formatDate = DateTimeFormatter.ofPattern("d LLLL");        date.setText(now.format(formatDate));        day.setText(now.format(formatDay));        time.setText(now.format(formatTime));            }    public void exit() {        Platform.exit();        System.exit(0);    }    public void about() {        try {            FXMLLoader loader = new FXMLLoader(getClass().getResource("about/about.fxml"));            Parent root = loader.load();            AboutController controller = loader.getController();            Stage stage = new Stage();            stage.initStyle(StageStyle.UNDECORATED);            Scene scene = new Scene(root, 450, 450);            scene.getStylesheets().add("timetable/about/about.css");            stage.setScene(scene);            controller.setStageAndSetupListeners(stage);            stage.show();        } catch (Exception e) {            list.getItems().add(e.toString());            e.printStackTrace();        }    }    public void settings() {        try {            FXMLLoader loader = new FXMLLoader(Main.class.getResource("settings/settings.fxml"));            Parent root = loader.load();            SettingsController controller = loader.getController();            Stage stage = new Stage();            stage.initStyle(StageStyle.UNDECORATED);            Scene scene = new Scene(root, 450, 450);            scene.getStylesheets().add("timetable/settings/settings.css");            stage.setScene(scene);            controller.setStageAndSetupListeners(stage);            stage.show();        } catch (IOException e) {            e.printStackTrace();        }    }    public void maximize() {        try{            if (stage.isMaximized()){                stage.setMaximized(false);            }else{                stage.setMaximized(true);            }        }catch (Exception e){            System.out.print(e);        }    }}